package com.pecSound{		import flash.display.MovieClip;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.events.Event;	import flash.events.EventDispatcher;		// This object is agnostic of the sound it contains.  It simply state and preference variables	// for a sound in the game.  This can be music, ambient sound, or sound effects.	public class SoundInfo extends MovieClip{				public var soundID:int = -1; // Tracks the index into mySoundLib of the current music track.  -1 Indicates no active music index.		private var externalID:int = -1; 		public var pos:int = 0; // This will hold position in music when we pause, in milliseconds		public var vol:Number = 0; // Value between 0 and 1 representing the volume		public var isLooping:Boolean = false; // Tracks the looping preference		public var isPaused:Boolean = false; // Tracks the pause status		public var channel:SoundChannel = new SoundChannel();		public var containerArray:Array = null;		public var length:int = 0;				// Fade Information		public var toFadeIn:Boolean = false;		public var fadeInLength:int = 0;		public var startingPos:int = 0; // If we start at point other than the start, we need to record it for fade-in purposes		public var toFadeOut:Boolean = false;		public var fadeOutLength:int = 0;		public var fadeOutStart:int = 0;				public var fadeLevel:Number = 1; // This is particular to this instance, lets us change volume without destroying fades		public var muteLevel:int = 1; // Tracks the mute status and acts as a multiplier.				// Constructor, if needed		public function SoundInfo(container:Array, extID:int):void{			containerArray = container;			externalID = extID;			channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);		}				// Destroys self by removing itself from the array		public function destroy():void{			containerArray.splice(containerArray.indexOf(this),1);		}				// Use to access the 		public function getExternalID():int{			return externalID;		}				public function setChannel(snd:Sound, pos:Number = 0, trans:SoundTransform = null)		{			channel = snd.play(pos);			if(channel){				if (trans != null)					channel.soundTransform = trans;				channel.addEventListener(Event.SOUND_COMPLETE, soundCompleteHandler);			}		}				// We want to bubble this up so that it can be caught from the class.		private function soundCompleteHandler(e:Event){			dispatchEvent(e);		}				}}