package com.pecSound{		import flash.media.Sound;		// Very simple, baked-in library.  Doesn't allow any dynamic loading of sounds, but will make	// dropping in a different library into the manager much easier.	public class SoundLibrary extends Object{				public static const NOTHING:int = -1;				// Music consts		public static const MUS_TITLE:int = 0;		public static const MUS_CALM:int = 1;		public static const MUS_SCENE:int = 2;		public static const MUS_BATTLE:int = 3;		public static const MUS_BATTLE_INTRO:int = 4;		public static const MUS_FINALE:int = 5;		public static const MUS_CREDITS:int = 6;				// SFX consts		public static const SFX_TITLE:int = 100; 		public static const SFX_TITLE_HIT:int = 101; 		public static const SFX_TITLE_OPENER:int = 102;		public static const SFX_BATTLE_HIT:int = 103;		public static const SFX_POP1:int = 105;		public static const SFX_POP2:int = 106;		public static const SFX_CRACK:int = 120;		public static const SFX_DIVIDE:int = 130;		public static const SFX_COIN:int = 140;		public static const SFX_DRAIN:int = 150;		public static const SFX_MULTI_DRAIN:int = 151;		public static const SFX_FANFARE:int = 160;		public static const SFX_DISCOVERY:int = 161;		public static const SFX_DISCOVERY_TWINKLE:int = 162;		public static const SFX_DISCOVERY_TWINKLE_LOW:int = 163;		public static const SFX_ABSORB:int = 170;		public static const SFX_WRITING:int = 180;		public static const SFX_VIRUS_RISE:int = 190;		public static const SFX_VIRUS_INFECT:int = 191;		public static const SFX_ZAP:int = 200;		public static const SFX_ZLAP:int = 201;		public static const SFX_SLICER_RISE:int = 210;		public static const SFX_RADICAL_RISE:int = 211;		public static const SFX_HURT:int = 220;		public static const SFX_DROPFALL:int = 221;		public static const SFX_SPLISH:int = 222;		public static const SFX_BLIPSTEPS:int = 250;		public static const SFX_MUD_STEP:int = 260;		public static const SFX_MUD_SLIDE:int = 261;		public static const SFX_HEAL:int = 270;		public static const SFX_REPAIR_RISE:int = 271;		public static const SFX_NEWACTION:int = 280;		public static const SFX_SHIELD:int = 290;		public static const SFX_TOXIN:int = 300;		public static const SFX_BLOCK:int = 302;		public static const SFX_CLICK_FOR_NEXT:int = 310;		// Ambient consts		public static const AMB_BUBBLES = 900;				// Music variables		private var mus_title:Sound = new Sound();		private var mus_calm:Sound = new Sound();		private var mus_scene:Sound = new Sound();		private var mus_battle:Sound = new Sound();		private var mus_battle_intro:Sound = new Sound();		private var mus_finale:Sound = new Sound();		private var mus_credits:Sound = new Sound();				// SFX variables		private var sfx_battle_hit:Sound = new Sound();		private var sfx_title_hit:Sound = new Sound();		private var sfx_title_opener:Sound = new Sound();		private var sfx_title:Sound = new Sound();		private var sfx_pop1:Sound = new Sound();		private var sfx_pop2:Sound = new Sound();		private var sfx_crack:Sound = new Sound();		private var sfx_divide:Sound = new Sound();		private var sfx_coin:Sound = new Sound();		private var sfx_drain:Sound = new Sound();		private var sfx_multi_drain:Sound = new Sound();		private var sfx_fanfare:Sound = new Sound();		private var sfx_discovery:Sound = new Sound();		private var sfx_discovery_twinkle:Sound = new Sound();		private var sfx_discovery_twinkle_low :Sound = new Sound();		private var sfx_absorb:Sound = new Sound();		private var sfx_writing:Sound = new Sound();		private var sfx_slicer_rise:Sound = new Sound();		private var sfx_radical_rise:Sound = new Sound();		private var sfx_virus_rise:Sound = new Sound();		private var sfx_virus_infect:Sound = new Sound();		private var sfx_zap:Sound = new Sound();		private var sfx_zlap:Sound = new Sound();		private var sfx_hurt:Sound = new Sound();		private var sfx_dropfall:Sound = new Sound();		private var sfx_splish:Sound = new Sound();		private var sfx_blipsteps:Sound = new Sound();		private var sfx_mud_step:Sound = new Sound();		private var sfx_mud_slide:Sound = new Sound();		private var sfx_repair_rise:Sound = new Sound();		private var sfx_heal:Sound = new Sound();		private var sfx_newaction:Sound = new Sound();		private var sfx_shield:Sound = new Sound();		private var sfx_toxin:Sound = new Sound();		private var sfx_block:Sound = new Sound();		private var sfx_click_for_next:Sound = new Sound();		// Ambient variables		private var amb_bubbles:Sound = new Sound();				// Constructor binds sounds in the flash library to the code		public function SoundLibrary():void{						// Music variables			mus_title = new MusicTitleLoop();			mus_calm = new MusicCalm();			mus_scene = new MusicScene();			mus_battle = new MusicBattle();			mus_battle_intro = new MusicBattleIntro();			mus_finale = new MusicFinale();			mus_credits = new MusicCredits();						// SFX variables			//sfx_title = new SFXTitleOpener();			sfx_battle_hit = new SFXBattleHit();			sfx_mud_step = new SFXMudStep();			sfx_mud_slide = new SFXMudSlide();			sfx_title_hit = new SFXTitleOpenerHit();			sfx_title_opener = new SFXTitleOpenerShort();			sfx_pop1 = new SFXPop1();			sfx_pop2 = new SFXPop2();			sfx_crack = new SFXCrack1();			sfx_divide = new SFXDivide();			sfx_coin = new SFXCoin();			sfx_drain = new SFXDrain();			sfx_multi_drain = new SFXMultiDrain();			sfx_fanfare = new SFXFanfare();			sfx_discovery = new SFXDiscovery();			sfx_discovery_twinkle = new SFXDiscoveryTwinkle();			sfx_discovery_twinkle_low = new SFXDiscoveryTwinkleLow();			sfx_absorb = new SFXAbsorb();			sfx_writing = new SFXWriting();			sfx_slicer_rise = new SFXSlicerRise();			sfx_radical_rise = new SFXRadicalRise();			sfx_virus_rise = new SFXVirusRise();			sfx_virus_infect = new SFXVirusInfect();			sfx_zap = new SFXZap();			sfx_zlap = new SFXZlap();			sfx_hurt = new SFXHurt();			sfx_dropfall = new SFXDropFall();			sfx_splish = new SFXSplish();			sfx_blipsteps = new SFXBlipSteps();			sfx_mud_slide = new SFXMudSlide();			sfx_mud_step = new SFXMudStep();			sfx_heal = new SFXHeal();			sfx_repair_rise = new SFXRepairRise();			sfx_newaction = new SFXNewAction();			sfx_shield = new SFXShield();			sfx_toxin = new SFXToxin();			sfx_block = new SFXBlock();			sfx_click_for_next = new SFXClickForNext();			// Ambient variables			amb_bubbles = new AMBBubbles();		}				public function getSound(index:int):Sound{			switch(index){				case MUS_TITLE:					return(mus_title);					break;				case MUS_CALM:					return(mus_calm);					break;				case MUS_SCENE:					return(mus_scene);					break;				case MUS_BATTLE:					return(mus_battle);					break;				case MUS_BATTLE_INTRO:					return(mus_battle_intro);					break;				case MUS_FINALE:					return(mus_finale);					break;				case MUS_CREDITS:					return(mus_credits);					break;				case SFX_BATTLE_HIT:					return(sfx_battle_hit);					break;				case SFX_TITLE_HIT:					return(sfx_title_hit);					break;				case SFX_TITLE_OPENER:					return(sfx_title_opener);					break;				case SFX_TITLE:					return(sfx_title);					break;				case SFX_CRACK:					return(sfx_crack);					break;				case SFX_POP1:					return(sfx_pop1);					break;				case SFX_POP2: 					return(sfx_pop2);					break;				case AMB_BUBBLES:					return(amb_bubbles);					break;				case SFX_COIN:					return(sfx_coin);					break;				case SFX_DRAIN:					return(sfx_drain);					break;				case SFX_MULTI_DRAIN:					return(sfx_multi_drain);					break;				case SFX_FANFARE:					return(sfx_fanfare);					break;				case SFX_DISCOVERY:					return(sfx_discovery);					break;				case SFX_DISCOVERY_TWINKLE:					return(sfx_discovery_twinkle);					break;				case SFX_DISCOVERY_TWINKLE_LOW:					return(sfx_discovery_twinkle_low);					break;				case SFX_ABSORB:					return(sfx_absorb);					break;				case SFX_WRITING:					return(sfx_writing);					break;				case SFX_VIRUS_RISE:					return(sfx_virus_rise);					break;				case SFX_SLICER_RISE:					return(sfx_slicer_rise);					break;				case SFX_RADICAL_RISE:					return(sfx_radical_rise);					break;				case SFX_ZAP:					return(sfx_zap);					break;				case SFX_ZLAP:					return(sfx_zlap);					break;				case SFX_VIRUS_INFECT:					return(sfx_virus_infect);					break;				case SFX_HURT:					return(sfx_hurt);					break;				case SFX_SPLISH:					return(sfx_splish);					break;				case SFX_DROPFALL:					return(sfx_dropfall);					break;				case SFX_BLIPSTEPS:					return(sfx_blipsteps);					break;				case SFX_MUD_SLIDE:					return(sfx_mud_slide);					break;				case SFX_MUD_STEP:					return(sfx_mud_step);					break;				case SFX_REPAIR_RISE:					return(sfx_repair_rise);					break;				case SFX_HEAL:					return(sfx_heal);					break;				case SFX_NEWACTION:					return(sfx_newaction);					break;				case SFX_SHIELD:					return(sfx_shield);					break;				case SFX_TOXIN:					return(sfx_toxin);					break;				case SFX_BLOCK:					return(sfx_block);					break;				case SFX_CLICK_FOR_NEXT:					return(sfx_click_for_next);					break;			}			return(null);		}	}}