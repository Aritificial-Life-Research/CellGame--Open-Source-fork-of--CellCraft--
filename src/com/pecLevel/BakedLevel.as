package com.pecLevel{	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.utils.Timer;		// This should be considered an abstract base class, never intended to be implemented.	public class BakedLevel extends Object{				protected var myXML:XML;		protected var isBaked:Boolean = false;				public var levelData:LevelData = new LevelData();		private var p_engine:Engine;				private var wait_timer:Timer;				// Derived classes should either set myXML manually and bake it or call loadFile.		public function BakedLevel(e:Engine){			p_engine = e;		}				// loadFile should be called if we're loading from an external file rather than using in-class XML.		protected function loadFile(fileName:String){		  	var myLoader:URLLoader = new URLLoader();			myLoader.load(new URLRequest(fileName));			myLoader.addEventListener(Event.COMPLETE, processXML);			myLoader.addEventListener(IOErrorEvent.IO_ERROR, loadError);						function processXML(e:Event):void {				myXML = new XML(e.target.data);				bakeData();				//trace(myXML.levelInfo.level.@index);			}						function loadError(e:IOErrorEvent):void{				trace('Error loading XML file.');			}		}				// bakeData should be called in the constructor of derived classes if it does not call loadFile. 		// This function parses through the XML document and populates stuff and things (and events).		protected function bakeData(){			var i:int;			var j:int;			var k:int;						trace("BakedLevel.bakeData()!");						// First grab the level data.			levelData.level_index = myXML.levelInfo.level.@index;			levelData.level_title = myXML.levelInfo.level.@title;			levelData.size_width = myXML.levelInfo.size.@width;			levelData.size_height = myXML.levelInfo.size.@height;			levelData.start_x = myXML.levelInfo.start.@x;			levelData.start_y = myXML.levelInfo.start.@y;			levelData.background_name = myXML.levelInfo.background.@name;			///*if (myXML.levelInfo.boundary.@type == "circle") {				levelData.boundary_circle = true;				levelData.boundary_circle_r = Number(myXML.levelInfo.size.@width) / 2;			/*}else if (myXML.levelInfo.boundary.@type == "box") {				levelData.boundary_box = true;				levelData.boundary_box_w = Number(myXML.levelInfo.size.@width)/2;				levelData.boundary_box_h = Number(myXML.levelInfo.size.@height)/2;*/			//}						levelData.start_atp = myXML.levelInfo.resources.@atp;			levelData.start_na = myXML.levelInfo.resources.@na;			levelData.start_aa = myXML.levelInfo.resources.@aa;			levelData.start_fa = myXML.levelInfo.resources.@fa;			levelData.start_g = myXML.levelInfo.resources.@g;						levelData.start_mitos = myXML.levelInfo.organelles.@mito;			levelData.start_chloros = myXML.levelInfo.organelles.@chloro;			levelData.start_lysos = myXML.levelInfo.organelles.@lyso;			levelData.start_ribos = myXML.levelInfo.organelles.@ribo;			levelData.start_peroxs = myXML.levelInfo.organelles.@perox;			levelData.start_slicers = myXML.levelInfo.organelles.@slicer;									// Now let's fill up the stuff.			var newStuff:StuffEntry = new StuffEntry();			// Goodies.			for (i = 0; i < myXML.levelStuff.goodies.stuff.length(); i++)			{				newStuff = new StuffEntry();				newStuff.stuff_name = myXML.levelStuff.goodies.stuff[i].@name;				newStuff.stuff_type = myXML.levelStuff.goodies.stuff[i].@type;				newStuff.stuff_count = myXML.levelStuff.goodies.stuff[i].@count;				newStuff.stuff_spawn = myXML.levelStuff.goodies.stuff[i].@spawn;				newStuff.active = (myXML.levelStuff.goodies.stuff[i].@active == "true");				//trace("BakedLevel.bakeData() newStuff: type="+newStuff.stuff_type + " active=" + newStuff.active);				levelData.levelStuff.goodies.push(newStuff);			}			// Objects.			for (i = 0; i < myXML.levelStuff.objects.stuff.length(); i++)			{				newStuff = new StuffEntry();				newStuff.stuff_name = myXML.levelStuff.objects.stuff[i].@name;				newStuff.stuff_type = myXML.levelStuff.objects.stuff[i].@type;				newStuff.stuff_count = myXML.levelStuff.objects.stuff[i].@count;				newStuff.stuff_spawn = myXML.levelStuff.objects.stuff[i].@spawn;				newStuff.active = (myXML.levelStuff.objects.stuff[i].@active == "true");				levelData.levelStuff.objects.push(newStuff);			}			// Enemies.			for (i = 0; i < myXML.levelStuff.enemies.stuff.length(); i++)			{				newStuff = new StuffEntry();				newStuff.stuff_name = myXML.levelStuff.enemies.stuff[i].@name;				newStuff.stuff_type = myXML.levelStuff.enemies.stuff[i].@type;				newStuff.stuff_count = myXML.levelStuff.enemies.stuff[i].@count;				newStuff.stuff_spawn = myXML.levelStuff.enemies.stuff[i].@spawn;				//if (myXML.levelStuff.enemies.stuff[i].@aggro) // Make sure it's present first.  Does this need a default?				newStuff.stuff_aggro = myXML.levelStuff.enemies.stuff[i].@aggro;				newStuff.active = (myXML.levelStuff.enemies.stuff[i].@active == "true");				levelData.levelStuff.enemies.push(newStuff);			}															// And the things.						var newThing:ThingEntry = new ThingEntry();			// Goodies.			for (i = 0; i < myXML.levelThings.goodies.thing.length(); i++)			{				newThing = new ThingEntry();				newThing.thing_name = myXML.levelThings.goodies.thing[i].@name;				newThing.thing_type = myXML.levelThings.goodies.thing[i].@type;				newThing.thing_x = myXML.levelThings.goodies.thing[i].@x;				newThing.thing_y = myXML.levelThings.goodies.thing[i].@y;				newThing.thing_count = myXML.levelThings.goodies.thing[i].@count;				newThing.thing_spawn = myXML.levelThings.goodies.thing[i].@spawn;				newThing.active = (myXML.levelThings.goodies.thing[i].@active == "true");				levelData.levelThings.goodies.push(newThing);			}			// Objects.			for (i = 0; i < myXML.levelThings.objects.thing.length(); i++)			{				newThing = new ThingEntry();				newThing.thing_name = myXML.levelThings.objects.thing[i].@name;				newThing.thing_type = myXML.levelThings.objects.thing[i].@type;				newThing.thing_x = myXML.levelThings.objects.thing[i].@x;				newThing.thing_y = myXML.levelThings.objects.thing[i].@y;				newThing.thing_count = myXML.levelThings.objects.thing[i].@count;				newThing.thing_spawn = myXML.levelThings.objects.thing[i].@spawn;				newThing.active = (myXML.levelThings.objects.thing[i].@active == "true");				levelData.levelThings.objects.push(newThing);			}			// Waves			for (i = 0; i < myXML.levelThings.waves.wave.length(); i++)			{				var newWave:WaveEntry = new WaveEntry();				newWave.id = myXML.levelThings.waves.wave[i].@id;				newWave.type = myXML.levelThings.waves.wave[i].@type;				newWave.count = myXML.levelThings.waves.wave[i].@count;				newWave.release_count = myXML.levelThings.waves.wave[i].@release_count;				newWave.original_count = newWave.count;				newWave.sleep_seconds = myXML.levelThings.waves.wave[i].@sleep_seconds;				newWave.delay = myXML.levelThings.waves.wave[i].@delay;				newWave.spread = myXML.levelThings.waves.wave[i].@spread;				newWave.vesicle = myXML.levelThings.waves.wave[i].@vesicle;				newWave.active = (myXML.levelThings.waves.wave[i].@active == "true");				levelData.levelThings.waves.push(newWave);			}						//trace("BakedLevel.bakeData() levelData = " + levelData);						// If we have events too, we'll do those here.						// Now let's grab the LevelTriggers (i.e. the various objectives)			// Iterate over the objectives.			for (i = 0; i < myXML.levelTriggers.objective.length(); i++)			{				//trace("Add Objective");				levelData.levelObjectives.push(new Objective());				levelData.levelObjectives[i].id = myXML.levelTriggers.objective[i].@id;				levelData.levelObjectives[i].active = (myXML.levelTriggers.objective[i].@active == "true");				levelData.levelObjectives[i].trigger = (myXML.levelTriggers.objective[i].@trigger == "true");				levelData.levelObjectives[i].objectiveString = myXML.levelTriggers.objective[i].data.@name; 				levelData.levelObjectives[i].objectiveType = myXML.levelTriggers.objective[i].data.@type;				levelData.levelObjectives[i].hidden = (myXML.levelTriggers.objective[i].data.@hidden=="true");				levelData.levelObjectives[i].targetType = myXML.levelTriggers.objective[i].data.@targetType;				levelData.levelObjectives[i].targetNum = myXML.levelTriggers.objective[i].data.@targetNum;				levelData.levelObjectives[i].targetCondition = myXML.levelTriggers.objective[i].data.@targetCondition;				levelData.levelObjectives[i].objectiveProgress = myXML.levelTriggers.objective[i].data.@progress;				levelData.levelObjectives[i].delay = int(myXML.levelTriggers.objective[i].data.@delay);				levelData.levelObjectives[i].soundLevel = myXML.levelTriggers.objective[i].@sound;				// Add any tutorials that should be shown upon completion of task				//trace("BakedLevel.bakeData() Tutorial id = " + myXML.levelTriggers.objective[i].action.showTutorial.@id);				levelData.levelObjectives[i].tutorial_id = myXML.levelTriggers.objective[i].action.showTutorial.@id;				for (j = 0; j < myXML.levelTriggers.objective[i].action.showTutorial.tutorial.length(); j++)				{					//trace("Add Tutorial");					//if (myXML.levelTriggers.objective[i].action.showTutorial.tutorial[j].@title == "talk") {											//}					levelData.levelObjectives[i].tutorials.push(new ObjectiveActionParam());					levelData.levelObjectives[i].tutorials[j].name = myXML.levelTriggers.objective[i].action.showTutorial.tutorial[j].@title;					levelData.levelObjectives[i].tutorials[j].val = myXML.levelTriggers.objective[i].action.showTutorial.tutorial[j].@slide;									}								var action:XML;				var pre_action:XML;							//Add the pre-actions				if(myXML.levelTriggers.objective[i].pre_action){ //check to make sure there's even an entry first					for each(pre_action in myXML.levelTriggers.objective[i].pre_action.children()) {						if(pre_action.name() != "showTutorial" && pre_action.name() != "discovery") //not allowed in pre-actions						{							//trace("Add Pre-Action");							levelData.levelObjectives[i].pre_actions.push(new ObjectiveAction());							var pa_i:int = levelData.levelObjectives[i].pre_actions.length - 1;							levelData.levelObjectives[i].pre_actions[pa_i].type = pre_action.name();							for each(var p_attr:XML in pre_action.attributes()) 							{								levelData.levelObjectives[i].pre_actions[pa_i].paramList.push(new ObjectiveActionParam);								var pp_i:int = levelData.levelObjectives[i].pre_actions[pa_i].paramList.length - 1;								levelData.levelObjectives[i].pre_actions[pa_i].paramList[pp_i].name = p_attr.name();								levelData.levelObjectives[i].pre_actions[pa_i].paramList[pp_i].val = p_attr;							}						}					}				}								// Add all other actions, excluding previously-added tutorials				for each (action in myXML.levelTriggers.objective[i].action.children())				{					if (action.name() != "showTutorial") // Already took care of tutorials					{						//trace("Add Action");						levelData.levelObjectives[i].actions.push(new ObjectiveAction());						var a_i:int = levelData.levelObjectives[i].actions.length - 1;						levelData.levelObjectives[i].actions[a_i].type = action.name();						for each (var attr:XML in action.attributes())						{							levelData.levelObjectives[i].actions[a_i].paramList.push(new ObjectiveActionParam);							var p_i:int = levelData.levelObjectives[i].actions[a_i].paramList.length - 1;							levelData.levelObjectives[i].actions[a_i].paramList[p_i].name = attr.name();							levelData.levelObjectives[i].actions[a_i].paramList[p_i].val = attr;						}					}					if (action.name() == "discovery") {						levelData.levelDiscoveries.push(new Discovery(action.@id, false));					}				}			}			 						//trace(newXML.length());			/*trace(levelData.levelStuff.goodies[1].stuff_name);			trace(levelData.levelThings.enemies[1].thing_health);			trace(levelData.levelThings.objects[0].thing_type);			trace(levelData.levelObjectives[0].objectiveString);			trace(levelData.levelObjectives[1].tutorials[2].name);			trace(levelData.levelObjectives[2].actions[1].paramList[0].val);*/					//trace(levelData);						p_engine.onLevelLoadWait(this); //hack		}						public function getXML():XML{		  return myXML;		}	}}