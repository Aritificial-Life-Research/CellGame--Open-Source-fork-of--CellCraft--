package com.pecLevel{		import flash.events.Event;		// This is an event dispatched by the Engine when certain events occur that may satisfy an objective.	public class EngineEvent extends Event{				// Static constants		public static const THING_CREATE:String = "thing_create";		//when you create something		public static const THING_DESTROY:String = "thing_destroy";		//when something dies, is deleted, or recycled		public static const THING_CHANGE:String = "thing_change"; 		//when your number of things changes		public static const RESOURCE_CHANGE:String = "resource_change"; //when your resource amount changes		public static const EXECUTE_ACTION:String = "execute_action";   //when you do a certain action		public static const FAIL_ACTION:String = "fail_action";   		//when you try to do a certain action, but it fails		public static const CANT_AFFORD_ACTION:String = "cant_afford_action";   		//when you try to do a certain action, but it fails		public static const ENGINE_TRIGGER:String = "engine_trigger";   //all other generic triggers		public static const SELECT_THING:String = "select_thing"; 		//when you select something		public static const THROW_FLAG:String = "throw_flag"; 			//when an action throws a flag		public static const ENEMY_ALERT:String = "enemy_alert";			//when an enemy alert has finished displaying		public static const ENEMY_SURVIVE:String = "enemy_survive";		//when all enemies of a certain type, AND their RNA, are gone				// Properties		public var eventType:String;  //What kind of event this is, if it needs more than its type description.									  //Mostly used for generic ENGINE_TRIGGER events. Can be null otherwise		public var targetType:String; // The target of the event, like ATP or mitochondria.  Should be a const of ObjectiveTarget.		public var targetNum:int; // How many of this thing are affected/created/gathered/owned.  For resources, this is the current store, not the change.  (i.e. adding 40 ATP to 120 ATP will send 160 with the event, not 40).				// Constructor.  Requires three parameter, with bubbles and cancelable as optional parameters.		public function EngineEvent(mainType:String, evType:String, targType:String, targNum:int, bubbles:Boolean = false, cancelable:Boolean = false){			eventType = evType;			targetType = targType;			targetNum = targNum;			super(mainType, bubbles, cancelable); 		}				public override function toString():String {			return "[EngineEvent mainType=\"" + type+ "\" evType=\"" + eventType + "\" targType=\"" + targetType + "\" targNum=" + targetNum + "]";		}				// Override clone so that it generates the correct type.		public override function clone():Event {				return new EngineEvent(type, eventType, targetType, targetNum, bubbles, cancelable);		}	}}