package com.pecLevel{	// Let's us package com.pecLevel up information about an objective in the game in a single open data structure.	public class Objective{		// Info about the objective		public var id:String; // Internal ID used primarily for activation of other objectives.  "start" is reserved for the opening objective.		public var active:Boolean; // Track whether or not this objective is considered to be currently active.		public var hidden:Boolean; // Is thits to be shown to the user as the most recent objective?		public var trigger:Boolean; //Does this fire automatically?		public var objectiveString:String; // Description shown to player.  "Collect 400 ATP."		public var objectiveLink:int; //id for cross-referencing		public var objectiveType:String; // Originally a const ref, but now a String.  // Constant from ObjectiveType class.		public var targetType:String; // Originally a const ref, but now a String. // Constant from ObjectiveTargetType class.		public var targetNum:int; // Number of items associated with the objective, like 400 (for ATP) or 3 (for mitos).		public var targetCondition:String; // Originally a const ref, but now a String. // Constant from ObjectiveCondition.		public var delay:int; //Number of frames to delay finishing the objective after the initial success		public var delayProgress:int = 0; //how long we've waited		// Status of the objective		public var objectiveProgress:int; // Used to track progress toward objective.  This is handled differently for different objectives.  For HAVE_RESOURCE we use a max, while HAVE_THING we track the number based on deltas.  Starting value must be specified in XML.		public var objectiveComplete:Boolean; // Will be set to true when it is completed		public var objectivePending:Boolean; //is this complete, but just delayed?		public var soundLevel:int; //which sound to play? 0=nothing, 1=low, 2=high				// Things to do after completing the objective				public var tutorial_id:String; //A string for the tutorial heading		public var tutorials:Vector.<ObjectiveActionParam>; // A sorted vector of tutorials to be shown, if any.  Broken out from other actions so we can pull these individually as needed.		public var actions:Vector.<ObjectiveAction>; // A vector of actions to take after completing the objective.  Can include discoveries and new objectives to activate.		public var pre_actions:Vector.<ObjectiveAction>; //A vector of actions to take after completing the objective, but BEFORE the tutorial is shown.				// I'm not sure that we really need this version of the constructor any more./*		public function Objective(obj:ObjectiveParams){			objectiveString = obj.objectiveString;			objectiveType = obj.objectiveType;			targetType = obj.targetType;			targetNum = obj.targetNum;			targetCondition = obj.targetCondition;						objectiveProgress = 0; // May need to reconsider setting this to 0 for some situations, like less_than conditions			objectiveComplete = false;						tutorials = new Vector.<ObjectiveActionParam>();			actions = new Vector.<ObjectiveActionParam>();		}*/				public function Objective(){			objectiveComplete = false;			objectivePending = false;			tutorials = new Vector.<ObjectiveActionParam>();			actions = new Vector.<ObjectiveAction>();			pre_actions = new Vector.<ObjectiveAction>();		}				public function toString():String {			var str:String = "Objective(id=" + id + " active=" + active + " hidden=" + hidden + "){\n";			str += "     string="+objectiveString+" type="+objectiveType+" tType=" + targetType + " tNum=" + targetNum + " tCon=" + targetCondition + " progress=" + objectiveProgress + " complete=" + objectiveComplete +  " delay="+delay+"\n}";			/*str += "     tutorials=" + tutorials + "\n";			str += "     actions=" + actions + "\n";*/			return str;		}	}}